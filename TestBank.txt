
public class TestBank {
public static void main(String[] args) {
	
	Bank b=new Bank(2000);
Transation t1=new Transation(b);
Transation t2=new Transation(b);
	t1.start();
	t2.start();
	
}
}

//Bank class to define withdraw and deposit function
class Bank {

	int balance;
	public Bank(int balance) {
		this.balance=balance;
		
	}

	public synchronized void withdraw(int amount ){
		if(balance<amount){
			System.out.println("Balace is not available");
		}else{
			System.out.println("Available balance is "+balance);
			  int newBalance = balance - amount;
			 try {
          			Thread.sleep(1000);
          		} catch (InterruptedException e) {
       
          			e.printStackTrace();
          		}
          		this.balance=newBalance;
          		System.out.println("Your Balance is "+newBalance);
              }              
		}
		public synchronized void   deposit(int amount){
			int temp=this.balance;
			temp=temp+amount;
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			this.balance=temp;
			System.out.println("Your Balance is "+balance);
			}
		}

//Transaction Class
class Transation extends Thread {

	private Bank bank;

	

	public Transation(Bank bank) {
		super();
		this.bank = bank;
	}
	//Override
	public void run() {
		super.run();
		bank.deposit(2000);
	bank.withdraw(400);
		
		
	}
}
